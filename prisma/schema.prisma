// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  portfolios Portfolio[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum OrderType {
  LIMIT
  MARKET
  STOP
  STOP_LIMIT
}

enum TradeAction {
  BUY
  SELL
}

model Portfolio {
  id          String @id @default(uuid())
  name        String
  description String @default("")

  dailyChangePercent Float @default(0)
  dailyChangeAmount  Float @default(0)

  cashBalance Float @default(0)

  totalValue Float @default(0)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  positions Position[]
}

model Position {
  id           String @id @default(uuid())
  name         String
  quantity     Float  @default(0) // Total quantity of the position
  averageCost  Float  @default(0) // Average cost per unit
  currentValue Float  @default(0) // Current value of the position

  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  history Trade[]
}

model Trade {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  finalized Boolean

  action   TradeAction // BUY or SELL
  type     OrderType // LIMIT, MARKET, STOP, etc.
  quantity Float // Number of units traded
  price    Float // Price per unit
  total    Float // Total value of the trade (quantity * price)

  positionId String
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
}
